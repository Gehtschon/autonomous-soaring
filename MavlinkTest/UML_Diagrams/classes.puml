@startuml




/' Objects '/

class CircularBuffer <template<typename T>> {
	+CircularBuffer(size_t size)
	+getIndex(size_t index) : T
	+getLatest() : T
	+isEmpty() : bool
	+calculateAverage() : double {query}
	+getBufferSize() : size_t
	+getMaxSize() : size_t
	-maxSize : size_t
	-buffer : std::vector<T>
	+displayBuffer() : void {query}
	+insert(const T& data) : void
}


class DataDistributor {
	+DataDistributor()
	+DataDistributor(size_t arraySize)
	-EnergyBuffer : CircularBuffer<Energy>
	-Energybufferderivation : CircularBuffer<Energy>
	+getEnergyBuffer() : CircularBuffer<Energy>& {query}
	+getEnergybufferderivation() : CircularBuffer<Energy>& {query}
	-AirSpeedBuffer : CircularBuffer<float>
	-AltBuffer : CircularBuffer<float>
	-ClimbRateBuffer : CircularBuffer<float>
	-GroundSpeedBuffer : CircularBuffer<float>
	-PitchBuffer : CircularBuffer<float>
	-RollBuffer : CircularBuffer<float>
	-YawBuffer : CircularBuffer<float>
	+getAirSpeedBuffer() : CircularBuffer<float>& {query}
	+getAltBuffer() : CircularBuffer<float>& {query}
	+getClimbRateBuffer() : CircularBuffer<float>& {query}
	+getGroundSpeedBuffer() : CircularBuffer<float>& {query}
	+getPitchBuffer() : CircularBuffer<float>& {query}
	+getRollBuffer() : CircularBuffer<float>& {query}
	+getYawBuffer() : CircularBuffer<float>& {query}
	-HeadingBuffer : CircularBuffer<int16_t>
	-LatitudeBuffer : CircularBuffer<int32_t>
	-LongitudeBuffer : CircularBuffer<int32_t>
	-energyCalculator : EnergyCalculator*
	+getTimeMillis() : long
	+addEnergy(const float Energy) : void
	+addEnergyDerivation(const float Energyder) : void
	+calcEnergy() : void
	-createEnergyCalculator() : void
	+decodeMessage(const std::vector<mavlink_message_t>& message, const std::vector<mavlink_status_t>& status) : void
	+generateFilledBuffers() : void
}


class Energy {
	+Energy(float energy)
	+Energy(float energy, int32_t lat, int32_t lon)
	+Energy()
	+operator*(float scalar) : Energy {query}
	+operator+(const Energy& other) : Energy {query}
	+operator-(const Energy& other) : Energy {query}
	+operator/(float divisor) : Energy {query}
	+operator*=(float scalar) : Energy&
	+operator++() : Energy&
	+operator+=(const Energy& other) : Energy&
	+operator--() : Energy&
	+operator-=(const Energy& other) : Energy&
	+operator/=(float divisor) : Energy&
	+operator!=(const Energy& other) : bool {query}
	+operator<(const Energy& other) : bool {query}
	+operator<=(const Energy& other) : bool {query}
	+operator==(const Energy& other) : bool {query}
	+operator>(const Energy& other) : bool {query}
	+operator>=(const Energy& other) : bool {query}
	-Energyvalue : float
	+getEnergyvalue() : float {query}
	+getLat() : int32_t {query}
	+getLon() : int32_t {query}
	-lat : int32_t
	-lon : int32_t
	+getTimeMilliSeconds() : long {query}
	-time_MilliSeconds : std::chrono::milliseconds::rep
	-createtimestamp() : void
	+setEnergyvalue(float energyvalue) : void
	+setLat(int32_t lat) : void
	+setLon(int32_t lon) : void
	+setTimeMilliSeconds(long timeSeconds) : void
}


class EnergyCalculator {
	+EnergyCalculator(DataDistributor& distributor)
	-dataDistributor : DataDistributor*
	-calcEnergyederivation() : Energy
	+getEnergy() : Energy
	+getEnergyDerivation() : Energy
	-avergeRadius : uint64_t
	+calcRadius() : uint64_t
}


abstract class SenderClass_Interface {
	+~SenderClass_Interface()
	+{abstract} Mav_Recive(std::vector<mavlink_message_t>& message, std::vector<mavlink_status_t>& status) : uint8_t
	+{abstract} Mav_Request_Data(uint8_t MAVStreams, uint16_t MAVRates, int MavStreamSize, int MavRateSize) : uint8_t
	+{abstract} send_heartbeat() : uint8_t
	+{abstract} send_some(mavlink_message_t message) : uint8_t
}


class SenderClass_UDP {
	+SenderClass_UDP(int socketFd)
	+~SenderClass_UDP()
	-socket_fd : int
	-src_addr_len : socklen_t
	+Mav_Recive(std::vector<mavlink_message_t>& message, std::vector<mavlink_status_t>& status) : uint8_t
	+Mav_Request_Data(uint8_t MAVStreams, uint16_t MAVRates, int MavStreamSize, int MavRateSize) : uint8_t
	+send_heartbeat() : uint8_t
	+send_some(mavlink_message_t message) : uint8_t
}


class SerialPort {
	+SerialPort()
	+SerialPort(const char* uartName, int baudrate_)
	-setup_port(int baud, int data_bits, int stop_bits, bool parity, bool hardware_control) : bool
	-uart_name : const char*
	-baudrate : int
	-fd : int
	-open_port(const char* port) : int
	-read_port(uint8_t& cp) : int
	+Mav_Recive(std::vector<mavlink_message_t>& message, std::vector<mavlink_status_t>& status) : uint8_t
	+Mav_Request_Data(uint8_t MAVStreams, uint16_t MAVRates, int MavStreamSize, int MavRateSize) : uint8_t
	+send_heartbeat() : uint8_t
	+send_some(mavlink_message_t message) : uint8_t
}


enum Messagetype {
	INT
	LONG
}


class SenderClass_UDP::sockaddr_insrc_addr= {
}





/' Inheritance relationships '/

.SenderClass_Interface <|-- .SenderClass_UDP





/' Aggregation relationships '/

.DataDistributor "12" *-- .CircularBuffer


.DataDistributor "2" *-- .Energy


.DataDistributor o-- .EnergyCalculator


.EnergyCalculator o-- .DataDistributor






/' Nested objects '/

.SenderClass_UDP +-- .SenderClass_UDP::sockaddr_insrc_addr=




@enduml
